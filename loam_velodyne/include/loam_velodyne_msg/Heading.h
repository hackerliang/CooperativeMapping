// Generated by gencpp from file loam_velodyne_msg/Heading.msg
// DO NOT EDIT!


#ifndef LOAM_VELODYNE_MSG_MESSAGE_HEADING_H
#define LOAM_VELODYNE_MSG_MESSAGE_HEADING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace loam_velodyne_msg
{
template <class ContainerAllocator>
struct Heading_
{
  typedef Heading_<ContainerAllocator> Type;

  Heading_()
    : radian_diff(0.0)
    , angle_diff(0.0)
    , x_diff(0.0)
    , y_diff(0.0)
    , z_diff(0.0)  {
    }
  Heading_(const ContainerAllocator& _alloc)
    : radian_diff(0.0)
    , angle_diff(0.0)
    , x_diff(0.0)
    , y_diff(0.0)
    , z_diff(0.0)  {
  (void)_alloc;
    }



   typedef double _radian_diff_type;
  _radian_diff_type radian_diff;

   typedef double _angle_diff_type;
  _angle_diff_type angle_diff;

   typedef double _x_diff_type;
  _x_diff_type x_diff;

   typedef double _y_diff_type;
  _y_diff_type y_diff;

   typedef double _z_diff_type;
  _z_diff_type z_diff;




  typedef boost::shared_ptr< ::loam_velodyne_msg::Heading_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::loam_velodyne_msg::Heading_<ContainerAllocator> const> ConstPtr;

}; // struct Heading_

typedef ::loam_velodyne_msg::Heading_<std::allocator<void> > Heading;

typedef boost::shared_ptr< ::loam_velodyne_msg::Heading > HeadingPtr;
typedef boost::shared_ptr< ::loam_velodyne_msg::Heading const> HeadingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::loam_velodyne_msg::Heading_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::loam_velodyne_msg::Heading_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace loam_velodyne_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'loam_velodyne_msg': ['/home/slam/catkin_velodyne/src/loam_velodyne_msg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::loam_velodyne_msg::Heading_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::loam_velodyne_msg::Heading_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::loam_velodyne_msg::Heading_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::loam_velodyne_msg::Heading_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::loam_velodyne_msg::Heading_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::loam_velodyne_msg::Heading_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::loam_velodyne_msg::Heading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "27e1f2d542f42324e8bf9ed435084dc4";
  }

  static const char* value(const ::loam_velodyne_msg::Heading_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x27e1f2d542f42324ULL;
  static const uint64_t static_value2 = 0xe8bf9ed435084dc4ULL;
};

template<class ContainerAllocator>
struct DataType< ::loam_velodyne_msg::Heading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "loam_velodyne_msg/Heading";
  }

  static const char* value(const ::loam_velodyne_msg::Heading_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::loam_velodyne_msg::Heading_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 radian_diff\n\
float64 angle_diff\n\
float64 x_diff\n\
float64 y_diff\n\
float64 z_diff\n\
";
  }

  static const char* value(const ::loam_velodyne_msg::Heading_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::loam_velodyne_msg::Heading_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.radian_diff);
      stream.next(m.angle_diff);
      stream.next(m.x_diff);
      stream.next(m.y_diff);
      stream.next(m.z_diff);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Heading_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::loam_velodyne_msg::Heading_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::loam_velodyne_msg::Heading_<ContainerAllocator>& v)
  {
    s << indent << "radian_diff: ";
    Printer<double>::stream(s, indent + "  ", v.radian_diff);
    s << indent << "angle_diff: ";
    Printer<double>::stream(s, indent + "  ", v.angle_diff);
    s << indent << "x_diff: ";
    Printer<double>::stream(s, indent + "  ", v.x_diff);
    s << indent << "y_diff: ";
    Printer<double>::stream(s, indent + "  ", v.y_diff);
    s << indent << "z_diff: ";
    Printer<double>::stream(s, indent + "  ", v.z_diff);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOAM_VELODYNE_MSG_MESSAGE_HEADING_H
